# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-06-06T22:48:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class ValidFor(BaseModel):
    startDateTime: str


class StatusItem(BaseModel):
    status: str
    validFor: ValidFor


class CharSpecExternalId(Enum):
    customerTaxCategory = 'customerTaxCategory'
    taxJurisdictionCode = 'taxJurisdictionCode'


class Value(Enum):
    field_12 = '12'
    field_23 = '23'


class ValueItem(BaseModel):
    value: Value


class CharacteristicItem(BaseModel):
    charSpecId: str
    charSpecExternalId: CharSpecExternalId
    validFor: ValidFor
    value: List[ValueItem]


class BillCycleSpecExternalId(Enum):
    field_1 = '1'
    field_10 = '10'
    field_15 = '15'
    field_20 = '20'
    field_24 = '24'
    field_5 = '5'


class ValidFor2(BaseModel):
    startDateTime: str
    endDateTime: Optional[str] = None


class CustomerBillCycleSpecificationItem(BaseModel):
    id: str
    externalId: str
    billCycleSpecId: str
    billCycleSpecExternalId: BillCycleSpecExternalId
    validFor: ValidFor2
    billCycleChangeType: Optional[str] = None


class ValidFor3(BaseModel):
    startDateTime: str


class StatusItem1(BaseModel):
    status: str
    validFor: ValidFor3


class NameItem(BaseModel):
    name: str
    validFor: ValidFor3


class AccountItem(BaseModel):
    externalId: str
    id: str
    billingAccountSpecId: str
    billingAccountSpecExternalId: str
    characteristic: List[CharacteristicItem]
    customerBillCycleSpecification: List[CustomerBillCycleSpecificationItem]
    status: List[StatusItem1]
    name: Optional[List[NameItem]] = None


class ContractSpecification(BaseModel):
    id: str


class ValueItem1(BaseModel):
    value: str


class CharacteristicItem1(BaseModel):
    charSpecId: str
    charSpecExternalId: str
    validFor: Optional[ValidFor3] = None
    value: List[ValueItem1]


class Reason(Enum):
    Ativacao_de_linha_Pos_pago___Migracao_Pre_pago_para_Pos_Pago = (
        'Ativacao de linha Pos-pago - Migracao Pre-pago para Pos-Pago'
    )
    Ativacao_de_linha_pos_pago___Migracao_Controle_para_Pos_Pago = (
        'Ativacao de linha pos-pago - Migracao Controle para Pos-Pago'
    )
    CTM = 'CTM'
    Cancelamento_de_Linha___A_pedido_do_cliente = (
        'Cancelamento de Linha - A pedido do cliente'
    )


class Status(Enum):
    ContractActive = 'ContractActive'
    ContractInactive = 'ContractInactive'
    ContractTerminated = 'ContractTerminated'


class ValidFor6(BaseModel):
    startDateTime: str
    endDateTime: Optional[str] = None


class StatusItem2(BaseModel):
    reason: Optional[Reason] = None
    status: Status
    validFor: ValidFor6


class CharSpecExternalId1(Enum):
    individualLimit = 'individualLimit'
    initialValue = 'initialValue'
    recurrenceValue = 'recurrenceValue'
    threshold_100 = 'threshold_100'
    threshold_80 = 'threshold_80'


class ValidFor7(BaseModel):
    startDateTime: str


class ValueItem2(BaseModel):
    value: str
    unitOfMeasure: Optional[str] = None


class CharacteristicItem2(BaseModel):
    charSpecId: str
    charSpecExternalId: CharSpecExternalId1
    validFor: Optional[ValidFor7] = None
    value: Optional[List[ValueItem2]] = None


class Status1(Enum):
    ProductActive = 'ProductActive'
    ProductInactive = 'ProductInactive'
    ProductTerminated = 'ProductTerminated'


class ValidFor8(BaseModel):
    startDateTime: str
    endDateTime: Optional[str] = None


class StatusItem3(BaseModel):
    status: Status1
    validFor: ValidFor8
    reason: Optional[str] = None


class BaRefForBillCycleAlignedRecurrence(BaseModel):
    id: str
    externalId: str


class ExternalId(Enum):
    First_Interval_Recurrence_Flex = 'First_Interval_Recurrence_Flex'
    Franquia_Comp_Initial_Flex = 'Franquia_Comp_Initial_Flex'
    Franquia_Comp_Recurrence_Flex = 'Franquia_Comp_Recurrence_Flex'
    Regular_Recurrence_Flex = 'Regular_Recurrence_Flex'


class ProductOfferingPriceExternalId(Enum):
    First_Interval_Recurrence_Flex = 'First_Interval_Recurrence_Flex'
    Franquia_Comp_Initial_Flex = 'Franquia_Comp_Initial_Flex'
    Franquia_Comp_Recurrence_Flex = 'Franquia_Comp_Recurrence_Flex'
    Regular_Recurrence_Flex = 'Regular_Recurrence_Flex'


class ProductOfferingPriceExternalId1(Enum):
    Add_to_PB = 'Add_to_PB'
    Add_to_PB_with_No_RO = 'Add_to_PB_with_No_RO'
    Add_to_PB_with_RO = 'Add_to_PB_with_RO'


class CharSpecExternalId2(Enum):
    Carry_over = 'Carry_over'
    Validity = 'Validity'
    Value = 'Value'
    actions = 'actions'
    addPBWithNoRO = 'addPBWithNoRO'
    addPBWithRecurrence = 'addPBWithRecurrence'
    set0ToPB = 'set0ToPB'
    valueWithUoM = 'valueWithUoM'


class ValidFor9(BaseModel):
    startDateTime: str


class UnitOfMeasure(Enum):
    byte = 'byte'
    percent = 'percent'


class ValueItem3(BaseModel):
    value: Optional[str] = None
    unitOfMeasure: Optional[UnitOfMeasure] = None


class ValueItem4(BaseModel):
    value: str
    unitOfMeasure: Optional[UnitOfMeasure] = None


class ComprisedOfItem2(BaseModel):
    charSpecId: str
    value: List[ValueItem4]


class ComprisedOfItem1(BaseModel):
    charSpecId: str
    value: List[Dict[str, Any]]
    comprisedOf: Optional[List[ComprisedOfItem2]] = None


class CharacteristicItem3(BaseModel):
    charSpecId: str
    charSpecExternalId: CharSpecExternalId2
    validFor: Optional[ValidFor9] = None
    value: List[ValueItem3]
    comprisedOf: Optional[List[ComprisedOfItem1]] = None


class ComprisedOfItem(BaseModel):
    id: str
    productOfferingPriceId: str
    productOfferingPriceExternalId: ProductOfferingPriceExternalId1
    characteristic: List[CharacteristicItem3]


class PriceItem(BaseModel):
    id: str
    externalId: ExternalId
    productOfferingPriceId: str
    productOfferingPriceExternalId: ProductOfferingPriceExternalId
    comprisedOf: List[ComprisedOfItem]


class BillingAccountItem(BaseModel):
    id: str
    externalId: str


class ValidFor10(BaseModel):
    startDateTime: str
    endDateTime: Optional[str] = None


class ConsumerListItem(BaseModel):
    externalId: Optional[str] = None
    id: str
    consumerCustomerId: str
    consumerCustomerExternalId: str
    consumerContractId: str
    consumerContractExternalId: Optional[str] = None
    validFor: ValidFor10


class SharingProvider(BaseModel):
    billingAccount: List[BillingAccountItem]
    consumerList: Optional[List[ConsumerListItem]] = None


class SharingConsumer(BaseModel):
    providerCustomerId: str
    providerCustomerExternalId: Optional[str] = None
    providerContractId: str
    providerContractExternalId: Optional[str] = None
    providerProductId: str
    consumerListEntryId: str
    consumerListEntryExternalId: Optional[str] = None


class ProductItem(BaseModel):
    productOfferingId: str
    productOfferingExternalId: str
    id: str
    externalId: str
    name: Optional[str] = None
    characteristic: Optional[List[CharacteristicItem2]] = None
    status: List[StatusItem3]
    baRefForBillCycleAlignedRecurrence: Optional[BaRefForBillCycleAlignedRecurrence] = (
        None
    )
    price: Optional[List[PriceItem]] = None
    sharingProvider: Optional[SharingProvider] = None
    sharingConsumer: Optional[SharingConsumer] = None


class Status2(Enum):
    ResourceActive = 'ResourceActive'
    ResourceInactive = 'ResourceInactive'
    ResourceTerminated = 'ResourceTerminated'


class StatusItem4(BaseModel):
    status: Status2
    validFor: ValidFor10


class ResourceSpecificationExternalId(Enum):
    LrsExtId_IMSI = 'LrsExtId_IMSI'
    LrsExtId_MSISDN = 'LrsExtId_MSISDN'


class ResourceItem(BaseModel):
    id: str
    externalId: str
    status: List[StatusItem4]
    resourceNumber: str
    resourceSpecificationId: str
    resourceSpecificationExternalId: ResourceSpecificationExternalId
    validFor: ValidFor10


class InteractionRole(Enum):
    ContractUser = 'ContractUser'
    LegalContractHolder = 'LegalContractHolder'


class RelatedPartyInteractionRoleItem(BaseModel):
    partyRoleId: str
    partyRoleExternalId: Optional[str] = None
    interactionRole: InteractionRole
    validFor: Optional[ValidFor10] = None
    id: Optional[str] = None


class TimeZone(Enum):
    America_Bahia = 'America/Bahia'
    America_Belem = 'America/Belem'
    America_Fortaleza = 'America/Fortaleza'
    America_Recife = 'America/Recife'
    America_Sao_Paulo = 'America/Sao_Paulo'


class HomeTimeZoneItem(BaseModel):
    timeZone: TimeZone
    validFor: Optional[ValidFor10] = None


class ValidFor15(BaseModel):
    startDateTime: str


class ContactMediumAssociationItem(BaseModel):
    contactRole: str
    validFor: ValidFor15
    contactMediumId: str
    contactMediumExternalId: str
    language: str
    enabled: bool


class ContractItem(BaseModel):
    id: str
    externalId: str
    contractSpecification: ContractSpecification
    paymentContext: str
    characteristic: List[CharacteristicItem1]
    status: List[StatusItem2]
    product: List[ProductItem]
    resource: List[ResourceItem]
    relatedPartyInteractionRole: List[RelatedPartyInteractionRoleItem]
    homeTimeZone: List[HomeTimeZoneItem]
    contactMediumAssociation: Optional[List[ContactMediumAssociationItem]] = None


class DisabledDateTimePeriodItem(BaseModel):
    startDateTime: str
    endDateTime: str


class ContactMediumAssociationItem1(BaseModel):
    contactRole: str
    validFor: ValidFor15
    contactMediumId: str
    contactMediumExternalId: Optional[str] = None
    language: str
    enabled: bool
    disabledDateTimePeriod: Optional[List[DisabledDateTimePeriodItem]] = None


class ValueItem5(BaseModel):
    value: str


class CharacteristicItem4(BaseModel):
    charSpecId: str
    charSpecExternalId: str
    validFor: ValidFor15
    value: List[ValueItem5]


class HomeTimeZoneItem1(BaseModel):
    timeZone: str
    validFor: Optional[ValidFor15] = None


class Model(BaseModel):
    id: str
    externalId: str
    status: List[StatusItem]
    account: List[AccountItem]
    contract: List[ContractItem]
    contactMediumAssociation: List[ContactMediumAssociationItem1]
    characteristic: Optional[List[CharacteristicItem4]] = None
    homeTimeZone: List[HomeTimeZoneItem1]
    relatedPartyId: Optional[str] = None
    relatedPartyExternalId: Optional[str] = None
